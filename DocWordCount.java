package org.myorg;

import java.io.IOException;
import java.util.regex.Pattern;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.lib.input.FileSplit;

import org.apache.log4j.Logger;

public class DocWordCount extends Configured implements Tool {

	private static final Logger LOG = Logger.getLogger(DocWordCount.class);

	public static void main(String[] args) throws Exception {
		// Tool Runner is used to parse the hadoop command line arguments and run our class.
		int res = ToolRunner.run(new DocWordCount(), args);
		System.exit(res);
	}

	public int run(String[] args) throws Exception {
		// Creates and name the job to run the map and reduce tasks.
		Job job = Job.getInstance(getConf(), "docwordcount");
		job.setJarByClass(this.getClass());

		FileInputFormat.addInputPath(job, new Path(args[0])); // Sets the args[0] as the input path for the job created.
		FileOutputFormat.setOutputPath(job, new Path(args[1])); // Sets the args[1] as the output path for the job.
		job.setMapperClass(Map.class); // Sets the map task to the job.
		job.setReducerClass(Reduce.class); // Sets the Reduce task to the job.
		job.setOutputKeyClass(Text.class); // Sets the type of output key
		job.setOutputValueClass(IntWritable.class); // Sets the type of output
													// value.
		return job.waitForCompletion(true) ? 0 : 1;
	}

	public static class Map extends
			Mapper<LongWritable, Text, Text, IntWritable> {
		private final static IntWritable one = new IntWritable(1);
		private Text word = new Text();
		private static final Pattern WORD_BOUNDARY = Pattern
				.compile("\\s*\\b\\s*");

		public void map(LongWritable offset, Text lineText, Context context)
				throws IOException, InterruptedException {
			String line = lineText.toString(); // Each line of the input is converted into a string
			Text currentWord = new Text();
			FileSplit fileSplit = (FileSplit) context.getInputSplit(); // Gets the FileSplit from context to obtain the file name.
			String fileName = fileSplit.getPath().getName();
			for (String word : WORD_BOUNDARY.split(line)) { // Splits the input line into a list of words based on the pattern.
				if (word.isEmpty()) {
					continue;
				}
				currentWord = new Text(word.toLowerCase()); // Converts each word to lower case and creates a Text object.
				Text fileString = new Text(currentWord + "####" + fileName); // Appends fileName for everyword with a delimiter "####".
				context.write(fileString, one); // Writes the intermediate data generated by map.
			}
		}
	}

	public static class Reduce extends
			Reducer<Text, IntWritable, Text, IntWritable> {
		@Override
		public void reduce(Text word, Iterable<IntWritable> counts,
				Context context) throws IOException, InterruptedException {
			int sum = 0;
			for (IntWritable count : counts) { // Calculates the number of occurances of each word
				sum += count.get();
			}
			context.write(word, new IntWritable(sum)); // Writes the output of Reduce task to HDFS.
		}
	}
}
